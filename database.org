* Database

For simplicity's sake, all game data is stored in Redis right now.
Most of this will be transitioned over to a persistent SQL DB.

** Concepts

*Game ID*: each game will have a unique ID (dev environment creates ~test1~ and
~test2~) which the players use to connect to the game. This ID should be kept
secret.

*Players*: players are persistent entities which can join a number of games.
Each player may have any number of characters. Being online/in game is tracked
by the player.

*Characters*: chars represent entities such as player characters. A player may
have multiple characters in a game if they have i.e. drones or companions. A
game master might have characters to represent NPCs. Dice rolls are performed by
the character.

*Sessions*: sessions are used with every client request to authenticate as a
player in a game. They are generated with a random ID and can be persistent
or temporary. Sessions are kept persistent while a player is actively connected
to the server. Sessions contain some basic information about the player as well,
for caching purposes.

*History/Events*: each time a player makes a dice/initiative roll, a new event
is created. Events are stored in a sorted set, sorted by millisecond timestamp
and stored as JSON strings. Events are also broadcast to all players in the game
they're created in via Redis pub/sub.

*Updates*: the server broadcasts state changes (i.e. event edited/deleted) to
all players via updates. These are small JSON strings often indicating a
key/value change. Like events, they are sent to clients via Redis pub/sub.

** Game ~game:{gameID}~ hash
- ~event_id~ number: unused.

** Player ~player:{playerID}~ hash
- ~username~

** Players by username ~players~ hash
- contains the userID for each player by username
- decent candidate for switching to SQL

** Sessions ~session:{sessionID}~ hash
- ~gameID~, ~playerID~ of the player in question
- ~persist~: 1 for persistent (default 1 month), 0 for temporary (default 15 min after logout).
  Persistence handled via Redis ~EXPIRE~.
- Also includes ~playerName~ to reduce Redis lookups.

** Char ~char:{charID}~ hash
- ~name~, ~hue~

** Persistent event history ~history:{gameID}~ sorted set
- score: timestamp (and ID) of the event
- value: the event as a JSON string (which includes its timestamp)

** Event channel ~event:{gameID}~ channel
- JSON-encoded events are published by event handlers
- Subscribed to by SSE subscription handler

** Update channel ~update:{gameID}~ channel
- JSON-encoded upates are published by event handlers
- Subscribed to by SSE subscription handler
